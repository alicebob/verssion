<root><template><title>for</title><part><name index="1"/><value>the agent-based language released in 2007</value></part><part><name index="2"/><value>Go! (programming language)</value></part></template>
<template lineStart="1"><title>redirect</title><part><name index="1"/><value>Google Go</value></part><part><name index="2"/><value>the computer program by Google to play the board game Go</value></part><part><name index="3"/><value>AlphaGo</value></part></template>
<template lineStart="1"><title>Infobox programming language
</title><part><name> name                   </name><equals>=</equals><value> Go
</value></part><part><name> logo                   </name><equals>=</equals><value> File:golang.png
</value></part><part><name> logo_size              </name><equals>=</equals><value> frameless
</value></part><part><name> logo caption           </name><equals>=</equals><value> Go's mascot is a [[gopher (animal)|gopher]], designed by [[Renée French]].<ext><name>ref</name><attr/><inner>{{cite web|url=http://golang.org/doc/faq#Whats_the_origin_of_the_mascot |title=FAQ&amp;nbsp;— The Go Programming Language |publisher=Golang.org |date= |accessdate=2013-06-25}}</inner><close>&lt;/ref&gt;</close></ext>
</value></part><part><name> paradigm               </name><equals>=</equals><value> [[compiled language|compiled]], [[concurrent programming|concurrent]], [[imperative programming|imperative]], [[structured programming|structured]]
</value></part><part><name> year                   </name><equals>=</equals><value> <template><title>start date and age</title><part><name index="1"/><value>2009</value></part><part><name index="2"/><value>11</value></part><part><name index="3"/><value>10</value></part></template>
</value></part><part><name> designer               </name><equals>=</equals><value> Robert Griesemer&lt;br /&gt;[[Rob Pike]]&lt;br /&gt;[[Ken Thompson]]
</value></part><part><name> developer              </name><equals>=</equals><value> [[Google|Google Inc.]]
</value></part><part><name> latest_release_version </name><equals>=</equals><value> 1.9
</value></part><part><name> latest_release_date    </name><equals>=</equals><value> <template><title>start date and age</title><part><name index="1"/><value>2017</value></part><part><name index="2"/><value>08</value></part><part><name index="3"/><value>24</value></part></template><ext><name>ref</name><attr> name=&quot;release_page&quot;</attr><inner>{{cite web|title=Release History - The Go Programming Language|url=https://golang.org/doc/devel/release.html#go1.9|accessdate=25 August 2017}}</inner><close>&lt;/ref&gt;</close></ext>
</value></part><part><name> latest_test_version    </name><equals>=</equals><value> 
</value></part><part><name> latest_test_date       </name><equals>=</equals><value> <comment>&lt;!--{{start date and age|2016|08|08}}&lt;ref name=&quot;preview_page&quot;&gt;{{cite web|title=Release History - The Go Programming Language|url=https://golang.org/dl/|website=golang.org|accessdate=8 August 2016}}&lt;/ref&gt;--&gt;</comment>
</value></part><part><name> typing                 </name><equals>=</equals><value> [[strong typing|strong]], [[static typing|static]], [[type inference|inferred]], [[structural typing|structural]]<ext><name>ref</name><attr> name=&quot;structural_typing&quot;</attr><inner>{{cite web |title=Why doesn't Go have &quot;implements&quot; declarations? |url=https://golang.org/doc/faq#implements_interface |work=golang.org |accessdate=1 October 2015}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url=https://twitter.com/rob_pike/status/546973312543227904 |title=Rob Pike on Twitter |last=Pike |first=Rob |date=2014-12-22 |accessdate=2016-03-13 |quote=Go has structural typing, not duck typing. Full interface satisfaction is checked and required. }}</inner><close>&lt;/ref&gt;</close></ext>
</value></part><part><name> implementations        </name><equals>=</equals><value> gc, gccgo
</value></part><part><name> programming language   </name><equals>=</equals><value> Go, [[assembly language]], previously C (gc); C++ (gccgo)
</value></part><part><name> dialects               </name><equals>=</equals><value>
</value></part><part><name> influenced_by          </name><equals>=</equals><value> [[Alef (programming language)|Alef]], [[APL (programming language)|APL]],<ext><name>ref</name><attr> name=&quot;hgophers&quot;</attr><inner>{{cite web |url=https://talks.golang.org/2014/hellogophers.slide#21 |title=Hello Gophers |last=Pike |first=Rob |date=2014-04-24 |accessdate=2016-03-11 }}</inner><close>&lt;/ref&gt;</close></ext> [[BCPL]],<ext><name>ref</name><attr> name=&quot;hgophers&quot;</attr><inner>{{cite web |url=https://talks.golang.org/2014/hellogophers.slide#21 |title=Hello Gophers |last=Pike |first=Rob |date=2014-04-24 |accessdate=2016-03-11 }}</inner><close>&lt;/ref&gt;</close></ext> [[C (programming language)|C]], [[Communicating sequential processes|CSP]], [[Limbo (programming language)|Limbo]], [[Modula]], [[Newsqueak]], [[Oberon (programming language)|Oberon]], [[Occam (programming language)|occam]], [[Pascal (programming language)|Pascal]],<ext><name>ref</name><attr> name=&quot;langfaq&quot;</attr></ext> [[Python (programming language)|Python]], [[Smalltalk]]<ext><name>ref</name><attr/><inner>{{cite web |title=The Evolution of Go|url=https://talks.golang.org/2015/gophercon-goevolution.slide#19|accessdate=2015-09-26}}</inner><close>&lt;/ref&gt;</close></ext>
</value></part><part><name> influenced             </name><equals>=</equals><value> [[Crystal (programming language)|Crystal]]
</value></part><part><name> operating_system       </name><equals>=</equals><value> [[Linux]], [[macOS]], [[FreeBSD]], [[NetBSD]], [[OpenBSD]],<ext><name>ref</name><attr> name=openbsd</attr><inner>{{cite web |url=http://ports.su/lang/go |title=lang/go: go-1.4 – Go programming language |work=OpenBSD ports |date=2014-12-23 |accessdate=2015-01-19}}</inner><close>&lt;/ref&gt;</close></ext> [[Windows]], [[Plan 9 from Bell Labs|Plan 9]],<ext><name>ref</name><attr/><inner>{{cite web|url=http://go-lang.cat-v.org/os-ports|title=Go Porting Efforts|date=12 January 2010|work=Go Language Resources|publisher=cat-v|accessdate=18 January 2010}}</inner><close>&lt;/ref&gt;</close></ext> [[DragonFly BSD]], [[Solaris (operating system)|Solaris]]
</value></part><part><name> license                </name><equals>=</equals><value> [[BSD licenses|BSD]]-style<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/LICENSE |title=Text file LICENSE |work=The Go Programming Language |publisher=Google |accessdate=5 October 2012}}</inner><close>&lt;/ref&gt;</close></ext> + [[software patents|patent]] grant<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/PATENTS |title=Additional IP Rights Grant |last= |first= |date= |work=The Go Programming Language |publisher=Google |accessdate=5 October 2012}}</inner><close>&lt;/ref&gt;</close></ext>
</value></part><part><name> website                </name><equals>=</equals><value> <template><title>Official URL</title></template>
</value></part><part><name> file_ext               </name><equals>=</equals><value> .go
</value></part></template>
'''Go''' (often referred to as '''golang''') is a [[programming language]] created at [[Google]]<ext><name>ref</name><attr/><inner>{{cite news|url=https://techcrunch.com/2009/11/10/google-go-language/|title=Google’s Go: A New Programming Language That’s Python Meets C++|last=Kincaid |first=Jason |date=10 November 2009 |newspaper=TechCrunch |accessdate=18 January 2010}}</inner><close>&lt;/ref&gt;</close></ext> in 2007 by Robert Griesemer, [[Rob Pike]], and [[Ken Thompson]].<ext><name>ref</name><attr> name=&quot;langfaq&quot;</attr><inner>{{cite web |url=http://golang.org/doc/go_faq.html |title=Language Design FAQ |date=16 January 2010 |work=golang.org |accessdate=27 February 2010}}</inner><close>&lt;/ref&gt;</close></ext> It is a [[compiler|compiled]], [[static typing|statically typed]] language in the tradition of [[ALGOL|Algol]] and [[C (programming language)|C]], with [[garbage collection (computer science)|garbage collection]], limited [[structural type system|structural typing]],<ext><name>ref</name><attr> name=&quot;structural_typing&quot;</attr></ext> [[memory safety]] features and [[communicating sequential processes|CSP]]-style [[concurrent programming]] features added.<ext><name>ref</name><attr> name=&quot;boldly&quot;</attr><inner>{{cite web |title=Google Go boldly goes where no code has gone before |website=The Register |url=https://www.theregister.co.uk/2011/05/05/google_go/ |date=5 May 2011 |first=Cade |last=Metz}}</inner><close>&lt;/ref&gt;</close></ext> The compiler and other language tools originally developed by Google are all [[Free software|free]] and [[open-source|open source]].<ext><name>ref</name><attr/><inner>https://golang.org/LICENSE</inner><close>&lt;/ref&gt;</close></ext>

<h level="2" i="1">==History==</h>
The language was announced in November 2009. It is used in some of Google's production systems, as well as by other firms.<ext><name>ref</name><attr> name=&quot;faq&quot;</attr><inner>
{{cite news 
|url= http://golang.org/doc/faq#Is_Google_using_go_internally 
|title= Go FAQ: Is Google using Go internally? 
|accessdate= 2013-03-09}}</inner><close>&lt;/ref&gt;</close></ext>

Two major implementations exist:

* Google's Go '''[[compiler]]''', &quot;gc&quot;, developed as [[open-source software]]. It targets various platforms including [[Linux]], [[OS X]], [[Windows]], various [[Berkeley Software Distribution|BSD]] and [[Unix]] versions, and also (since 2015) mobile devices (including [[smartphone]]s).<ext><name>ref</name><attr/><inner>{{cite web |title= Google's In-House Programming Language Now Runs on Phones |website= [[wired.com]] |date= 19 August 2015 |url= https://www.wired.com/2015/08/googles-house-programming-language-now-runs-phones/}}</inner><close>&lt;/ref&gt;</close></ext>
* A second compiler, gccgo, is a [[GNU Compiler Collection|GCC]] frontend.<ext><name>ref</name><attr/><inner>{{cite web |url= http://golang.org/doc/go_faq.html#Implementation |title= FAQ: Implementation |date= 16 January 2010 |work= golang.org |accessdate= 2010-01-18}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url= https://gcc.gnu.org/install/configure.html |title= Installing GCC: Configuration |accessdate= 2011-12-03 |quote= Ada, Go and Objective-C++ are not default languages}}</inner><close>&lt;/ref&gt;</close></ext>

The &quot;gc&quot; toolchain has been [[self-hosting]] since version 1.5.<ext><name>ref</name><attr/><inner>{{cite web |title= Go 1.5 Release Notes |url= https://golang.org/doc/go1.5#implementation |accessdate= 28 January 2016 |quote= The compiler and runtime are now implemented in Go and assembler, without C.}}</inner><close>&lt;/ref&gt;</close></ext>

Go originated as an experiment by Google engineers Robert Griesemer, [[Rob Pike]], and [[Ken Thompson]] to design a new programming language that would resolve common criticisms of other languages while maintaining their positive characteristics.  The developers envisaged the new language as:<ext><name>ref</name><attr/><inner>{{cite web |url= http://www.stanford.edu/class/ee380/Abstracts/100428.html |title= Another Go at Language Design |last= Pike |first= Rob |date= 28 April 2010 |work= Stanford EE Computer Systems Colloquium |publisher= [[Stanford University]]}} [https://www.youtube.com/watch?v=7VcArS4Wpqk Video available].</inner><close>&lt;/ref&gt;</close></ext>

* statically typed, scalable to large systems (as [[Java (programming language)|Java]] and [[C++]])
* [[programming productivity|productive]] and readable, without too many mandatory keywords and repetition<ext><name>ref</name><attr/><inner>{{cite web
|url= https://golang.org/doc/faq#different_syntax
|title= Frequently Asked Questions (FAQ) - The Go Programming Language
|work= golang.org
|accessdate= 2016-02-26
}}</inner><close>&lt;/ref&gt;</close></ext> (&quot;light on the page&quot; like [[dynamic language]]s)
* not requiring [[integrated development environment]]s, but supporting them well
* supporting networking and multiprocessing

In later interviews, all three of the language designers cited their shared dislike of C++'s complexity as a primary motivation for designing a new language.<ext><name>ref</name><attr/><inner>{{cite web |url= http://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480 |title= Dr. Dobb's: Interview with Ken Thompson |author= Andrew Binstock |date= 18 May 2011 |accessdate= 2014-02-07}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url= http://commandcenter.blogspot.mx/2012/06/less-is-exponentially-more.html |title= Less is exponentially more |year= 2012 |last= Pike |first= Rob}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url= https://talks.golang.org/2015/gophercon-goevolution.slide#4 |title= The Evolution of Go |year= 2015 |author= Robert Griesemer}}
</inner><close>&lt;/ref&gt;</close></ext>

Google released Go 1.0 in March 2012.<ext><name>ref</name><attr/><inner>
{{cite news
| last1                 = Shankland
| first1                = Stephen
| title                 = Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google.
| url                   = https://www.cnet.com/news/googles-go-language-turns-one-wins-a-spot-at-youtube/
| department            = News
| website               = CNet
| publisher             = CBS Interactive Inc
| publication-date      = 2012-03-30
| access-date           = 2017-08-06
| quote                 = Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. 
}}
</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>
{{cite web
|url= https://golang.org/doc/devel/release.html
|title= Release History
}}
</inner><close>&lt;/ref&gt;</close></ext>

<h level="2" i="2">==Language design==</h>
Go is recognizably in the tradition of [[C (programming language)|C]], but makes many changes to improve brevity, simplicity, and safety. Go consists of,

* A syntax and environment adopting patterns more common in [[dynamic programming language|dynamic language]]s:<ext><name>ref</name><attr> name=go_lang_video_2009</attr><inner>{{cite web|last=Pike|first=Rob|title=The Go Programming Language|url=https://www.youtube.com/watch?v=rKnDgT73v8s&amp;feature=related|publisher=YouTube|accessdate=2011-07-01}}</inner><close>&lt;/ref&gt;</close></ext>
** Optional concise variable declaration and initialization through [[type inference]] (&lt;code&gt;x := 0&lt;/code&gt; not &lt;code&gt;int x = 0;&lt;/code&gt; or &lt;code&gt;var x = 0;&lt;/code&gt;).
** Fast compilation times.<ext><name>ref</name><attr> name=&quot;techtalk-compiling&quot;</attr><inner>{{cite video |people=[[Rob Pike]] |date=10 November 2009 |title=The Go Programming Language |url=https://www.youtube.com/watch?v=rKnDgT73v8s#t=8m53 |format=flv |medium=Tech talk |publisher=Google |time=8:53}}</inner><close>&lt;/ref&gt;</close></ext>
** Remote package management (&lt;code&gt;go get&lt;/code&gt;)<ext><name>ref</name><attr/><inner>[http://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies Download and install packages and dependencies - go - The Go Programming Language]; see [http://godoc.org godoc.org] for addresses and documentation of some packages</inner><close>&lt;/ref&gt;</close></ext> and online package documentation.<ext><name>ref</name><attr/><inner>{{cite web |url=http://godoc.org |title=GoDoc |work=godoc.org}}</inner><close>&lt;/ref&gt;</close></ext>
* Distinctive approaches to particular problems:
** Built-in concurrency primitives: [[light-weight process]]es (goroutines), [[channel (programming)|channel]]s, and the &lt;code&gt;select&lt;/code&gt; statement.
** An [[protocol (object-oriented programming)|interface]] system in place of [[virtual inheritance]], and type embedding instead of non-virtual inheritance.
** A toolchain that, by default, produces [[static library|statically linked]] native binaries without external dependencies.
* A desire to keep the language specification simple enough to hold in a programmer's head,<ext><name>ref</name><attr/><inner>Rob Pike, on [http://5by5.tv/changelog/100 The Changelog] podcast</inner><close>&lt;/ref&gt;</close></ext> in part by [[Go (programming language)#Omissions|omitting features common to similar languages]].

<h level="3" i="3">===Syntax===</h>
Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write &lt;code&gt;i := 3&lt;/code&gt; or &lt;code&gt;s := &quot;Hello, world!&quot;&lt;/code&gt;, [[type inference|without specifying the type]]s of variables. This contrasts with C's &lt;code&gt;int i = 3;&lt;/code&gt; and &lt;code&gt;const char *s = &quot;Hello, world!&quot;;&lt;/code&gt;. Semicolons still terminate statements, but are implicit when the end of a line occurs. Functions may return multiple values, and returning a &lt;code&gt;result, err&lt;/code&gt; pair is the conventional way a function indicates an error to its caller in Go.<template><title>efn</title><part><name>1</name><equals>=</equals><value>Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See [[Semipredicate problem#Multivalued return|Semipredicate problem: Multivalued return]].</value></part></template> Go adds literal syntaxes for initializing struct parameters by name, and for initializing [[Associative array|maps]] and [[Array slicing|slices]]. As an alternative to C's three-statement &lt;code&gt;for&lt;/code&gt; loop, Go's &lt;code&gt;range&lt;/code&gt; expressions allow concise iteration over arrays, slices, strings, maps, and channels.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

<h level="3" i="4">===Types===</h>
Go has a number of built-in types, including numeric ones (<template><title>mono</title><part><name index="1"/><value>byte</value></part></template>, <template><title>mono</title><part><name index="1"/><value>int64</value></part></template>, <template><title>mono</title><part><name index="1"/><value>float32</value></part></template>, etc.), [[boolean data type|boolean]]s, and character strings (<template><title>mono</title><part><name index="1"/><value>string</value></part></template>). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and [[UTF-8]] encoding and decoding.<ext><name>ref</name><attr/><inner>Rob Pike, [http://blog.golang.org/strings Strings, bytes, runes and characters in Go], 23 October 2013</inner><close>&lt;/ref&gt;</close></ext> [[Record (computer science)|Record type]]s can be defined with the <template><title>mono</title><part><name index="1"/><value>struct</value></part></template> keyword.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

For each type <template><title>mono</title><part><name index="1"/><value>''T''</value></part></template> and each non-negative integer constant <template><title>mono</title><part><name index="1"/><value>''n''</value></part></template>, there is an [[array data type|array type]] denoted <template><title>mono</title><part><name index="1"/><value>[''n'']''T''</value></part></template>; arrays of differing lengths are thus of different types. [[Dynamic array]]s are available as &quot;slices&quot;, denoted <template><title>mono</title><part><name index="1"/><value>[]''T''</value></part></template> for some type <template><title>mono</title><part><name index="1"/><value>''T''</value></part></template>. These have a length and a ''capacity'' specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.<template><title>r</title><part><name index="1"/><value>append</value></part></template><ext><name>ref</name><attr/><inner>Andrew Gerrand, [http://blog.golang.org/go-slices-usage-and-internals Go Slices: usage and internals]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>The Go Authors, [http://golang.org/doc/effective_go.html#slices Effective Go: Slices]</inner><close>&lt;/ref&gt;</close></ext>

[[Pointer (computer programming)|Pointer]]s are available for all types, and the pointer-to-<template><title>mono</title><part><name index="1"/><value>''T''</value></part></template> type is denoted <template><title>mono</title><part><name index="1"/><value>*''T''</value></part></template>. Address-taking and indirection use the <template><title>mono</title><part><name index="1"/><value>&amp;amp;</value></part></template> and <template><title>mono</title><part><name index="1"/><value>*</value></part></template> operators as in C, or happen implicitly through the method call or attribute access syntax.<ext><name>ref</name><attr/><inner>The Go authors [https://golang.org/ref/spec#Selectors Selectors - The Go Programming Language Specification] and [https://golang.org/ref/spec#Calls Calls - The Go Programming Language Specification]</inner><close>&lt;/ref&gt;</close></ext> There is no pointer arithmetic, except via the special <template><title>mono</title><part><name index="1"/><value>unsafe.Pointer</value></part></template> type in the standard library.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

For a pair of types <template><title>mono</title><part><name index="1"/><value>''K''</value></part></template>, <template><title>mono</title><part><name index="1"/><value>''V''</value></part></template>, the type <template><title>mono</title><part><name index="1"/><value>map[''K'']''V''</value></part></template> is the type of [[hash table]]s mapping type-<template><title>mono</title><part><name index="1"/><value>''K''</value></part></template> keys to type-<template><title>mono</title><part><name index="1"/><value>''V''</value></part></template> values. Hash tables are built into the language, with special syntax and built-in functions. <template><title>mono</title><part><name index="1"/><value>chan ''T''</value></part></template> is a ''channel'' that allows sending values of type ''T'' between [[Go (programming language)#Concurrency|concurrent Go processes]].<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Aside from its support for [[#Interfaces|interfaces]], Go's type system is [[nominal type system|nominal]]: the <template><title>mono</title><part><name index="1"/><value>type</value></part></template> keyword can be used to define a new ''named type'', which is distinct from other named types that have the same layout (in the case of a <template><title>mono</title><part><name index="1"/><value>struct</value></part></template>, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/ref/spec#Assignability |title=The Go Programming Language Specification |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> For example, the <template><title>mono</title><part><name index="1"/><value>type</value></part></template> keyword can be used to define a type for [[IPv4]] addresses, which are 32-bit unsigned integers.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

<ext><name>syntaxhighlight</name><attr> lang=&quot;go&quot;</attr><inner>
type ipv4addr uint32
</inner><close>&lt;/syntaxhighlight&gt;</close></ext>

With this type definition, <template><title>mono</title><part><name index="1"/><value>ipv4addr(x)</value></part></template> interprets the <template><title>mono</title><part><name index="1"/><value>uint32</value></part></template> value <template><title>mono</title><part><name index="1"/><value>x</value></part></template> as an IP address. Simply assigning <template><title>mono</title><part><name index="1"/><value>x</value></part></template> to a variable of type <template><title>mono</title><part><name index="1"/><value>ipv4addr</value></part></template> is a type error.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Constant expressions may be either typed or &quot;untyped&quot;; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/ref/spec#Constants |title=The Go Programming Language Specification |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>

[[Subroutine|Function]] types are indicated by the <template><title>mono</title><part><name index="1"/><value>func</value></part></template> keyword; they take zero or more [[parameter (computer programming)|parameter]]s and [[return statement|return]] zero or more values, all of which are typed. The parameter and return values determine a function type; thus, <template><title>mono</title><part><name index="1"/><value>func(string, int32) (int, error)</value></part></template> is the type of functions that take a <template><title>mono</title><part><name index="1"/><value>string</value></part></template> and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type <template><title>mono</title><part><name index="1"/><value>error</value></part></template>.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Any named type has a [[method (computer programming)|method]] set associated with it. The IP address example above can be extended with a method for checking if its value is a known standard.

<ext><name>syntaxhighlight</name><attr> lang=&quot;go&quot;</attr><inner>
// ZeroBroadcast reports whether addr is 255.255.255.255.
func (addr ipv4addr) ZeroBroadcast() bool {
    return addr == 0xFFFFFFFF
}
</inner><close>&lt;/syntaxhighlight&gt;</close></ext>

Due to nominal typing, this method definition adds a method to <template><title>mono</title><part><name index="1"/><value>ipv4addr</value></part></template>, but not on <template><title>mono</title><part><name index="1"/><value>uint32</value></part></template>. While methods have special definition and call syntax, there is no distinct method type.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/ref/spec#Calls |title=The Go Programming Language Specification |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="4" i="5">====<template><title>anchor</title><part><name index="1"/><value>Interfaces</value></part></template> Interface system====</h>
Go provides two features that replace [[inheritance (object-oriented programming)|class inheritance]].<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

The first is ''embedding'', which can be viewed as an automated form of [[object composition|composition]]<template><title>r</title><part><name index="1"/><value>gohotdraw</value></part></template> or [[delegation (object-oriented programming)|delegation]].<ext><name>ref</name><attr> name=&quot;summerfield&quot;</attr><inner>{{cite book |title=Programming in Go: Creating Applications for the 21st Century |first=Mark |last=Summerfield |publisher=Addison-Wesley |year=2012}}</inner><close>&lt;/ref&gt;</close></ext><template><title>rp</title><part><name index="1"/><value>255</value></part></template>

The second are its ''[[protocol (object-oriented programming)|interface]]s'', which provides [[runtime polymorphism]].<ext><name>ref</name><attr> name=&quot;balbaert&quot;</attr><inner>{{cite book |title=The Way to Go: A Thorough Introduction to the Go Programming Language |first=Ivo |last=Balbaert |publisher=iUniverse |year=2012}}</inner><close>&lt;/ref&gt;</close></ext><template><title>rp</title><part><name index="1"/><value>266</value></part></template> Interfaces provide a limited form of [[structural type system|structural typing]] in the otherwise nominal type system of Go. Any type that implements all methods of an interface conforms to that interface. Go interfaces were designed after [[protocol (object-oriented programming)|protocol]]s from the Smalltalk programming language.<ext><name>ref</name><attr/><inner>{{cite web |url=https://talks.golang.org/2015/gophercon-goevolution.slide#19 |title=The Evolution of Go |website=talks.golang.org |access-date=2016-03-13}}</inner><close>&lt;/ref&gt;</close></ext> Multiple sources use the term [[duck typing]] when describing Go interface.<ext><name>ref</name><attr/><inner>{{cite web |url=http://www.drdobbs.com/architecture-and-design/duck-typing-and-the-go-programming-langu/228701527 |title=Duck Typing and the Go Programming Language |last=Diggins |first=Christopher |publisher=[[Dr. Dobb's Journal|Dr. Dobb's]] |date=2009-11-24 |accessdate=2016-03-10 }}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url=https://medium.com/@matryer/golang-advent-calendar-day-one-duck-typing-a513aaed544d#.ebm7j81xu |title=Duck typing in Go |last=Ryer |first=Mat |date=2015-12-01 |accessdate=2016-03-10}}</inner><close>&lt;/ref&gt;</close></ext> Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Since conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer to use the term ''structural typing''.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

An interface specifies a set of types by listing required methods and their types and is satisfied by any type that has the required methods. Implementing types do not need to specify their implementing of interfaces, so if <template><title>mono</title><part><name index="1"/><value>Shape</value></part></template>, <template><title>mono</title><part><name index="1"/><value>Square</value></part></template> <template><title>mono</title><part><name index="1"/><value>and Circle</value></part></template> are defined as:

<ext><name>syntaxhighlight</name><attr> lang=&quot;go&quot;</attr><inner>
import &quot;math&quot;

type Shape interface {
    Area() float64
}

type Square struct { // Note: no &quot;implements&quot; declaration
    side float64
}

func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No &quot;implements&quot; declaration here either
    radius float64
}

func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) } 
</inner><close>&lt;/syntaxhighlight&gt;</close></ext>

Both <template><title>mono</title><part><name index="1"/><value>Square</value></part></template> and <template><title>mono</title><part><name index="1"/><value>Circle</value></part></template> are implicitly a <template><title>mono</title><part><name index="1"/><value>Shape</value></part></template> and can be assigned to a <template><title>mono</title><part><name index="1"/><value>Shape</value></part></template>-typed variable.<template><title>r</title><part><name index="1"/><value>balbaert</value></part></template><template><title>rp</title><part><name index="1"/><value>263–268</value></part></template> In formal language, Go's interface system provides [[structural type system|structural]] rather than [[nominal type system|nominal]] typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.<template><title>r</title><part><name index="1"/><value>balbaert</value></part></template><template><title>rp</title><part><name index="1"/><value>270</value></part></template>

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of <template><title>mono</title><part><name index="1"/><value>Reader</value></part></template> and <template><title>mono</title><part><name index="1"/><value>Writer</value></part></template>.<template><title>r</title><part><name index="1"/><value>balbaert</value></part></template><template><title>rp</title><part><name index="1"/><value>282–283</value></part></template>

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the ''type assertion'',<ext><name>ref</name><attr/><inner>{{cite web|url=http://golang.org/ref/spec#Type_assertions|title=The Go Programming Language Specification|work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> which checks against a single potential type, and the ''type switch'',<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/ref/spec#Type_switches |title=The Go Programming Language Specification |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> which checks against multiple types.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

The ''empty interface'' &lt;code&gt;interface{}&lt;/code&gt; is an important corner case because it can refer to an item of ''any'' concrete type. It is similar to the <template><title>mono</title><part><name index="1"/><value>Object</value></part></template> class in [[Java (programming language)|Java]] or [[C Sharp (programming language)|C#]] and is satisfied by any type, including built-in types like <template><title>mono</title><part><name index="1"/><value>int</value></part></template>.<template><title>r</title><part><name index="1"/><value>balbaert</value></part></template><template><title>rp</title><part><name index="1"/><value>284</value></part></template> Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the &lt;code&gt;interface{}&lt;/code&gt; value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's &lt;code&gt;reflect&lt;/code&gt; package.<ext><name>ref</name><attr/><inner>[http://golang.org/pkg/reflect/#ValueOf reflect.ValueOf(i interface{})] converts an &lt;code&gt;interface{}&lt;/code&gt; to a &lt;code&gt;reflect.Value&lt;/code&gt; that can be further inspected</inner><close>&lt;/ref&gt;</close></ext> Because &lt;code&gt;interface{}&lt;/code&gt; can refer to any value, it is a limited way to escape the restrictions of static typing, like &lt;code&gt;void*&lt;/code&gt; in C but with additional run-time type checks.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Interface values are implemented using pointer to data and a second pointer to run-time type information.<ext><name>ref</name><attr/><inner>{{cite web |url=http://research.swtch.com/interfaces |title=Go Data Structures: Interfaces |accessdate=15 November 2012}}</inner><close>&lt;/ref&gt;</close></ext> Like some other types implemented using pointers in Go, interface values are &lt;code&gt;nil&lt;/code&gt; if uninitialized.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/ref/spec#Interface_types |title=The Go Programming Language Specification |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="6">===Package system===</h>
In Go's package system, each package has a path (e.g., &lt;code&gt;&quot;compress/bzip2&quot;&lt;/code&gt; or &lt;code&gt;&quot;golang.org/x/net/html&quot;&lt;/code&gt;) and a name (e.g., &lt;code&gt;bzip2&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt;). References to other packages' definitions must ''always'' be prefixed with the other package's name, and only the ''capitalized'' names from other packages are accessible: &lt;code&gt;io.Reader&lt;/code&gt; is public but &lt;code&gt;bzip2.reader&lt;/code&gt; is not.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/doc/go_tutorial.html |title=A Tutorial for the Go Programming Language |work=The Go Programming Language |publisher=Google |accessdate=10 March 2013 |quote=In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared.}}</inner><close>&lt;/ref&gt;</close></ext> The &lt;code&gt;go get&lt;/code&gt; command can retrieve packages stored in a remote repository such as [[GitHub]],<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies |title=go - The Go Programming Language |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as github.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.<ext><name>ref</name><attr/><inner>{{cite web |url=https://golang.org/doc/code.html |title=How to Write Go Code |work=golang.org |quote=The packages from the standard library are given short import paths such as &quot;fmt&quot; and &quot;net/http&quot;. For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have a GitHub account at github.com/user, that should be your base path}}</inner><close>&lt;/ref&gt;</close></ext>

Proposals exist to introduce a proper package management solution for Go similar to [[Rust (programming language)|Rust]]'s cargo system or [[Node.js|Node]]'s npm system.<ext><name>ref</name><attr/><inner>{{cite web |url=https://docs.google.com/document/d/18tNd8r5DV0yluCR7tPvkMTsWD_lYcRO7NhpNSDymRr8/edit?pref=2&amp;pli=1 |title=Go Packaging Proposal Process}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="7">===<template><title>anchor</title><part><name index="1"/><value>Concurrency</value></part></template> Concurrency: goroutines and channels===</h>
The Go language has built-in facilities, as well as library support, for writing [[concurrent programming|concurrent program]]s. Concurrency refers not only to CPU parallelism, but also to [[asynchronous I/O|asynchrony]]: letting slow operations like a database or network-read run while the program does other work, as is common in event-based servers.<ext><name>ref</name><attr> name=&quot;concurrency-is-not&quot;</attr><inner>Rob Pike, [http://vimeo.com/49718712 Concurrency is not Parallelism]</inner><close>&lt;/ref&gt;</close></ext>

The primary concurrency construct is the ''goroutine'', a type of [[light-weight process]]. A function call prefixed with the <template><title>mono</title><part><name index="1"/><value>go</value></part></template> keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of [[thread (computer science)|operating system thread]]s, similar to the scheduling performed in [[Erlang (programming language)|Erlang]].<template><title>r</title><part><name index="1"/><value>phrasebook</value></part></template><template><title>rp</title><part><name index="1"/><value>10</value></part></template>

While a standard library package featuring most of the classical [[concurrency control]] structures ([[mutex]] locks, etc.) is available,<template><title>r</title><part><name index="1"/><value>phrasebook</value></part></template><template><title>rp</title><part><name index="1"/><value>151–152</value></part></template> idiomatic concurrent programs instead prefer ''channels'', which provide [[message passing|send message]]s between goroutines.<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/doc/effective_go.html#sharing |title=Effective Go |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> Optional buffers store messages in [[FIFO (computing and electronics)|FIFO]] order<template><title>r</title><part><name index="1"/><value>summerfield</value></part></template><template><title>rp</title><part><name index="1"/><value>43</value></part></template> and allow sending goroutines to proceed before their messages are received.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Channels are typed, so that a channel of type <template><title>mono</title><part><name index="1"/><value>chan ''T''</value></part></template> can only be used to transfer messages of type <template><title>mono</title><part><name index="1"/><value>''T''</value></part></template>. Special syntax is used to operate on them; <template><title>mono</title><part><name index="1"/><value>&lt;-ch</value></part></template> is an expression that causes the executing goroutine to block until a value comes in over the channel <template><title>mono</title><part><name index="1"/><value>ch</value></part></template>, while <template><title>mono</title><part><name index="1"/><value>ch &lt;- x</value></part></template> sends the value <template><title>mono</title><part><name index="1"/><value>x</value></part></template> (possibly blocking until another goroutine receives the value). The built-in <template><title>mono</title><part><name index="1"/><value>switch</value></part></template>-like <template><title>mono</title><part><name index="1"/><value>select</value></part></template> statement can be used to implement non-blocking communication on multiple channels; see [[#Concurrency example|below]] for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.<ext><name>ref</name><attr/><inner>{{cite web|url=http://golang.org/ref/mem|title=The Go Memory Model|accessdate=10 April 2017}}</inner><close>&lt;/ref&gt;</close></ext>

The existence of channels sets Go apart from [[actor model]]-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.<template><title>r</title><part><name index="1"/><value>phrasebook</value></part></template><template><title>rp</title><part><name index="1"/><value>147</value></part></template>

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, &quot;fan-out&quot; parallel calls to a set of services, and others.<ext><name>ref</name><attr/><inner>{{cite web |url=http://talks.golang.org/2012/concurrency.slide |title=Go Concurrency Patterns |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext> Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,<ext><name>ref</name><attr/><inner>John Graham-Cumming, [http://blog.cloudflare.com/recycling-memory-buffers-in-go Recycling Memory Buffers in Go]</inner><close>&lt;/ref&gt;</close></ext> implementing coroutines (which helped inspire the name ''goroutine''),<ext><name>ref</name><attr/><inner>[http://golang.org/doc/play/tree.go tree.go]</inner><close>&lt;/ref&gt;</close></ext> and implementing iterators.<ext><name>ref</name><attr/><inner>Ewen Cheslack-Postava, [http://ewencp.org/blog/golang-iterators/ Iterators in Go]</inner><close>&lt;/ref&gt;</close></ext>

Concurrency-related structural conventions of Go ([[channel (programming)|channel]]s and alternative channel inputs) are derived from [[C. A. R. Hoare|Tony Hoare's]] [[communicating sequential processes]] model. Unlike previous concurrent programming languages such as [[Occam (programming language)|Occam]] or [[Limbo (programming language)|Limbo]] (a language on which Go co-designer Rob Pike worked),<ext><name>ref</name><attr/><inner>Brian W. Kernighan, [http://www.vitanuova.com/inferno/papers/descent.html A Descent Into Limbo]</inner><close>&lt;/ref&gt;</close></ext> Go does not provide any built-in notion of safe or verifiable concurrency.<ext><name>ref</name><attr> name=&quot;memmodel&quot;</attr><inner>{{cite web |url=http://golang.org/doc/go_mem.html |title=The Go Memory Model |publisher=Google |accessdate=5 January 2011}}</inner><close>&lt;/ref&gt;</close></ext> While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see <template><title>slink</title><part><name index="1"/><value/></part><part><name index="2"/><value>Lack of race condition safety</value></part></template>, below.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

<h level="4" i="8">====Suitability for parallel programming====</h>
Although Go's concurrency features are not aimed primarily at [[parallel computing|parallel processing]],<template><title>r</title><part><name index="1"/><value>concurrency-is-not</value></part></template> they can be used to program [[shared memory architecture|shared memory]] [[multiprocessing|multi-processor]] machines. Various studies have been done into the effectiveness of this approach.<ext><name>ref</name><attr/><inner>{{cite conference |last=Tang |first=Peiyi |title=Multi-core parallel programming in Go |conference=Proc. First International Conference on Advanced Computing and Communications |year=2010 |url=http://www.ualr.edu/pxtang/papers/acc10.pdf}}</inner><close>&lt;/ref&gt;</close></ext> One of these studies compared the size (in [[lines of code]]) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for [[Chapel (programming language)|Chapel]], [[Cilk]] and [[Intel Threading Building Blocks|Intel TBB]]. The study found that the non-expert tended to write [[fork–join model|divide-and-conquer]] algorithms with one <template><title>mono</title><part><name index="1"/><value>go</value></part></template> statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.<ext><name>ref</name><attr/><inner>{{cite conference |last1=Nanz |first1=Sebastian |first2=Scott |last2=West |first3=Kaue |last3=Soares Da Silveira |title=Examining the expert gap in parallel programming |conference=Euro-Par 2013 |url=http://se.inf.ethz.ch/people/west/expert-gap-europar-2013.pdf |citeseerx=10.1.1.368.6137}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="4" i="9">====Lack of race condition safety====</h>
There are no restrictions on how goroutines access shared data, making [[race condition]]s possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.<ext><name>ref</name><attr> name=&quot;memmodel&quot;</attr></ext> Furthermore, Go's ''internal data structures'' like interface values, slice headers, hash tables, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.<ext><name>ref</name><attr/><inner>Russ Cox, [http://research.swtch.com/gorace Off to the Races]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr> name=&quot;SPLASH2012&quot;</attr><inner>{{cite web |first=Rob |last=Pike |authorlink=Rob Pike |date=October 25, 2012 |title=Go at Google: Language Design in the Service of Software Engineering |url=http://talks.golang.org/2012/splash.article |publisher=Google, Inc.}} &quot;There is one important caveat: Go is not purely memory safe in the presence of concurrency.&quot;</inner><close>&lt;/ref&gt;</close></ext>

Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called &quot;aliases [[exclusive or|xor]] mutable&quot;, meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.<template><title>r</title><part><name index="1"/><value>phrasebook</value></part></template><template><title>rp</title><part><name index="1"/><value>155</value></part></template>

<h level="3" i="10">===Omissions===</h>
Go deliberately omits certain features common in other languages, including [[inheritance (object-oriented programming)|(implementation) inheritance]], [[generic programming]], [[Assertion (software development)|assertions]], [[pointer arithmetic]], and [[type conversion#Implicit type conversion|implicit type conversion]]s.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

Of these language features, the Go authors express an openness to generic programming, explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of [[protocol (object-oriented programming)|interface]]s to achieve dynamic dispatch<template><title>efn</title><part><name index="1"/><value>Questions &quot;How do I get dynamic dispatch of methods?&quot; and &quot;Why is there no type inheritance?&quot; in the language FAQ.<ext><name>ref</name><attr> name=&quot;langfaq&quot;</attr></ext></value></part></template> and [[composition over inheritance|composition]] to reuse code. Composition and [[delegation (programming)|delegation]] are in fact largely automated by <template><title>mono</title><part><name index="1"/><value>struct</value></part></template> embedding; according to researchers Schmager ''et al.'', this feature &quot;has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static&quot;, making it &quot;not obvious&quot; whether programmers will not overuse it to the extent that programmers in other languages are reputed to overuse inheritance.<ext><name>ref</name><attr> name=&quot;gohotdraw&quot;</attr><inner>{{cite conference |last1=Schmager |first1=Frank |first2=Nicholas |last2=Cameron |first3=James |last3=Noble |title=GoHotDraw: evaluating the Go programming language with design patterns |conference=Evaluation and Usability of Programming Languages and Tools |publisher=ACM |year=2010}}</inner><close>&lt;/ref&gt;</close></ext>

Regarding generic programming, some built-in functions ''are'' in fact type-generic, but these are treated as special cases; Rob Pike calls this a weakness of the language that may at some point be changed.<ext><name>ref</name><attr> name=&quot;append&quot;</attr><inner>{{cite web |title=Arrays, slices (and strings): The mechanics of 'append' |first=Rob |last=Pike |website=The Go Blog |url=http://blog.golang.org/slices |date=26 September 2013 |accessdate=7 March 2015}}</inner><close>&lt;/ref&gt;</close></ext> The Google team that designs the language built at least one compiler for an experimental Go dialect with generics, but did not release it.<ext><name>ref</name><attr/><inner>{{cite web |title=E2E: Erik Meijer and Robert Griesemer – Going Go |website=Channel 9 |publisher=Microsoft |date=7 May 2012 |url=http://channel9.msdn.com/Blogs/Charles/Erik-Meijer-and-Robert-Griesemer-Go}}</inner><close>&lt;/ref&gt;</close></ext>

After initially omitting [[exception handling|exception]]s, the exception-like <template><title>mono</title><part><name index="1"/><value>panic</value></part></template>/<template><title>mono</title><part><name index="1"/><value>recover</value></part></template> mechanism was eventually added to the language, which the Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package (but not across package boundaries; there, error returns are the standard API).<ext><name>ref</name><attr/><inner>[https://code.google.com/p/go-wiki/wiki/PanicAndRecover Panic And Recover], Go wiki</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/doc/devel/weekly.html#2010-03-30 |title=Weekly Snapshot History|work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url=https://groups.google.com/group/golang-nuts/browse_thread/thread/1ce5cd050bb973e4 |title=Proposal for an exception-like mechanism |date=25 March 2010 |work=golang-nuts |accessdate=25 March 2010}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web |url=https://golang.org/doc/effective_go.html#panic |title=Effective Go |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="11">===Criticism===</h>
Go critics assert that:

* lack of compile-time [[generic programming|generic]]s leads to [[duplicate code|code duplication]], [[metaprogramming]] cannot be statically checked<ext><name>ref</name><attr> name=&quot;yager&quot;</attr><inner>Will Yager, [http://yager.io/programming/go.html Why Go is not Good]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>Egon Elbre, [https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit# Summary of Go Generics discussions]</inner><close>&lt;/ref&gt;</close></ext> and the standard library cannot offer generic algorithms<ext><name>ref</name><attr/><inner>{{cite web |last1=Fitzpatrick |first1=Brad |title=Go: 90%!P(MISSING)erfect, 100%!o(MISSING)f the time |url=https://talks.golang.org/2014/gocon-tokyo.slide#50 |accessdate=28 January 2016}}</inner><close>&lt;/ref&gt;</close></ext>
* lack of language extensibility (through, for instance, operator overloading) makes certain tasks more verbose<ext><name>ref</name><attr> name=&quot;yager&quot; </attr></ext><ext><name>ref</name><attr/><inner>Danny Gratzer, [http://jozefg.bitbucket.org/posts/2013-08-23-leaving-go.html Leaving Go]</inner><close>&lt;/ref&gt;</close></ext>
* the type system's lack of [[Hindley–Milner]] typing inhibiting safety and/or expressiveness<ext><name>ref</name><attr> name=&quot;yager&quot;</attr><inner>Will Yager, [http://yager.io/programming/go.html Why Go is not Good]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr> name=&quot;forsyth&quot;</attr><inner>Jared Forsyth, [http://jaredly.github.io/2014/03/22/rust-vs-go/ Rust vs. Go]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr> name=&quot;dobronszki&quot;</attr><inner>Janos Dobronszki, [http://crufter.com/2014/12/01/everyday-hassles-in-go/ Everyday Hassles in Go]</inner><close>&lt;/ref&gt;</close></ext>
* the pauses and overhead of [[Garbage collection (computer science)|garbage collection]] (''GC'') limit Go's use in systems programming compared to languages with [[manual memory management]].<ext><name>ref</name><attr> name=&quot;yager&quot; </attr></ext><ext><name>ref</name><attr> name=&quot;forsyth&quot; </attr></ext>

The language designers argue that these trade-offs are important to Go's success,<ext><name>ref</name><attr/><inner>Rob Pike, [http://commandcenter.blogspot.de/2012/06/less-is-exponentially-more.html Less is exponentially more]</inner><close>&lt;/ref&gt;</close></ext> and explain some particular decisions at length,<ext><name>ref</name><attr/><inner>The Go Authors, [http://golang.org/doc/faq Frequently Asked Questions (FAQ)]</inner><close>&lt;/ref&gt;</close></ext> though they do express openness to adding some form of generic programming in the future, and to pragmatic improvements in areas like standardizing ways to apply code generation.<ext><name>ref</name><attr/><inner>Rob Pike, [https://blog.golang.org/generate Generating code]</inner><close>&lt;/ref&gt;</close></ext> 

GC has improved to sub-millisecond pause times in later versions<ext><name>ref</name><attr/><inner>{{cite web|author=Rhys Hiltner|publisher=[[Twitch.tv]]|title=Go’s march to low-latency GC|date=2016-07-05|url=https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.68hdx6qc1|quote=It’s the story of how improvements to the Go runtime between Go 1.4 and Go 1.6 gave us a 20x improvement in garbage collection (GC) pause time, of how we’ve gotten another 10x improvement in Go 1.6’s pauses, and of how sharing our experience with the Go runtime team helped them give us an additional 10x speedup in Go 1.7 while obsoleting our manual tuning.}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>Richard Hudson, [http://golang.org/s/go14gc Go 1.4+ Garbage Collection (GC) Plan and Roadmap]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{Cite web|url=https://twitter.com/brianhatfield/status/804355831080751104?lang=en|title=SUB. MILLISECOND. PAUSE. TIME. ON. AN. 18. GIG. HEAP.|last=Hatfield|first=Brian|date=2016-12-01|website=|language=en|archive-url=|archive-date=|dead-url=|access-date=2017-10-07}}</inner><close>&lt;/ref&gt;</close></ext>, while acknowledging their GC algorithm is not [[hard real-time]].<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>December 2016</value></part></template>

<h level="2" i="12">==Conventions and code style==</h>
The Go authors put substantial effort into molding the style and design of Go programs:
* Indentation, spacing, and other surface-level details of code are automatically standardized by the &lt;code&gt;gofmt&lt;/code&gt; tool. &lt;code&gt;golint&lt;/code&gt; does additional style checks automatically.
* Tools and libraries distributed with Go suggest standard approaches to things like API documentation (&lt;code&gt;godoc&lt;/code&gt;<ext><name>ref</name><attr/><inner>{{cite web |url=http://golang.org/doc/effective_go.html#commentary |title=Effective Go |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>), testing (&lt;code&gt;go test&lt;/code&gt;), building (&lt;code&gt;go build&lt;/code&gt;), package management (&lt;code&gt;go get&lt;/code&gt;), and so on.
* Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit type conversions.
* The ''omission'' of certain features (for example, functional-programming shortcuts like &lt;code&gt;map&lt;/code&gt; and C++-style &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; blocks) tends to encourage a particular explicit, concrete, and imperative programming style.
* On day one the Go team published a [https://golang.org/doc/effective_go.html collection of Go idioms], and later also [https://github.com/golang/go/wiki/CodeReviewComments collected code review comments], [https://talks.golang.org/ talks], [http://blog.golang.org/errors-are-values official blog posts] to teach Go style and coding philosophy.

<h level="2" i="13">==Language tools==</h>
Go includes the same sort of debugging, testing, and code-vetting tools as many language distributions. The Go distribution includes, among other tools,
* &lt;code&gt;go build&lt;/code&gt;, which builds Go binaries using only information in the source files themselves, no separate makefiles
* &lt;code&gt;go test&lt;/code&gt;, for unit testing and microbenchmarks
* &lt;code&gt;go fmt&lt;/code&gt;, for formatting code
* &lt;code&gt;go get&lt;/code&gt;, for retrieving and installing remote packages
* &lt;code&gt;go vet&lt;/code&gt;, a static analyzer looking for potential errors in code
* &lt;code&gt;go run&lt;/code&gt;, a shortcut for building and executing code
* &lt;code&gt;godoc&lt;/code&gt;, for displaying documentation or serving it via HTTP
* &lt;code&gt;gorename&lt;/code&gt;, for renaming variables, functions, and so on in a type-safe way
* &lt;code&gt;go generate&lt;/code&gt;, a standard way to invoke code generators

It also includes profiling and debugging support, runtime instrumentation (to, for example, track garbage collection pauses), and a race condition tester.

There is an ecosystem of third-party tools that add to the standard distribution, such as &lt;code&gt;gocode&lt;/code&gt;, which enables code autocompletion in many text editors, &lt;code&gt;goimports&lt;/code&gt; (by a Go team member), which automatically adds/removes package imports as needed, &lt;code&gt;errcheck&lt;/code&gt;, which detects code that might unintentionally ignore errors, and more. Plugins exist to add language support in widely used text editors, and at least one [[integrated development environment|IDE]], LiteIDE, is branded as &quot;a simple, open source, cross-platform Go IDE.&quot;<ext><name>ref</name><attr/><inner>[https://github.com/visualfc/liteide LiteIDE],</inner><close>&lt;/ref&gt;</close></ext>

<h level="2" i="14">==Examples==</h>

<h level="3" i="15">===Hello world===</h>

Here is a [[Hello world program]] in Go:
<ext><name>syntaxhighlight</name><attr> lang=&quot;go&quot;</attr><inner>
package main

import &quot;fmt&quot;

func main() {
    fmt.Println(&quot;Hello, World&quot;)
}
</inner><close>&lt;/syntaxhighlight&gt;</close></ext>

<h level="3" i="16">===Concurrency example===</h>
The following simple program demonstrates Go's [[#Concurrency|concurrency feature]]s to implement an asynchronous program. It launches two &quot;goroutines&quot; (lightweight threads): one waits for the user to type some text, while the other implements a timeout. The <template><title>mono</title><part><name index="1"/><value>select</value></part></template> statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from Chisnall).<ext><name>ref</name><attr> name=&quot;phrasebook&quot;</attr><inner>{{cite book |title=The Go Programming Language Phrasebook |first=David |last=Chisnall |publisher=Addison-Wesley |year=2012 |url=https://books.google.com/books?id=scyH562VXZUC}}</inner><close>&lt;/ref&gt;</close></ext><template><title>rp</title><part><name index="1"/><value>152</value></part></template>
<ext><name>syntaxhighlight</name><attr> lang=&quot;go&quot;</attr><inner>
package main

import (
    &quot;fmt&quot;
    &quot;time&quot;
)

func readword(ch chan string) {
    fmt.Println(&quot;Type a word, then hit Enter.&quot;)
    var word string
    fmt.Scanf(&quot;%!s(MISSING)&quot;, &amp;word)
    ch &lt;- word
}

func timeout(t chan bool) {
    time.Sleep(5 * time.Second)
    t &lt;- true
}

func main() {
    t := make(chan bool)
    go timeout(t)

    ch := make(chan string)
    go readword(ch)

    select {
    case word := &lt;-ch:
        fmt.Println(&quot;Received&quot;, word)
    case &lt;-t:
        fmt.Println(&quot;Timeout.&quot;)
    }
}
</inner><close>&lt;/syntaxhighlight&gt;</close></ext>

<h level="2" i="17">==Projects using Go==</h>
<template lineStart="1"><title>Primary sources</title><part><name index="1"/><value>section</value></part><part><name>date</name><equals>=</equals><value>November 2015</value></part></template>
Some notable [[open-source]] applications in Go include:
* The &quot;[[Lightning Network]]&quot;, a [[bitcoin]] network that allows for fast Bitcoin transactions and scalability.<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>January 2017</value></part></template>
* [[Caddy (web_server)|Caddy]], an open source HTTP/2 web server with automatic HTTPS support.
* [[CockroachDB]], an open source, survivable, strongly consistent, scale-out SQL database.
* [https://dgraph.io/ Dgraph], an open source, scalable, distributed, highly available and fast graph database.
* [[Docker (software)|Docker]], a set of tools for deploying [[Linux]] containers
* Doozer, a lock service by managed hosting provider [[Heroku]]<template><title>r</title><part><name index="1"/><value>boldly</value></part></template>
* Geth software is a golang implementation of [[Ethereum]]-protocol [[blockchain (database)|blockchain]] technology, which implements a  shared world computing platform.<ext><name>ref</name><attr/><inner>{{Cite web|url=http://www.investopedia.com/articles/investing/072516/how-mine-ethereum-your-computer.asp|title=How to Mine Ethereum on Your Computer|last=Hayes|first=Adam|date=|website=|publisher=|access-date=}}</inner><close>&lt;/ref&gt;</close></ext>
* Gogs, self-hosted Git Service.<ext><name>ref</name><attr/><inner>{{Cite web|url=https://gogs.io|title=Gogs - Go Git Service - a painless self-hosted Git service}}</inner><close>&lt;/ref&gt;</close></ext>
* [https://gohugo.io/ Hugo], an open source static site generator.
* [[InfluxDB]], an open source database specifically to handle time series data with high availability and high performance requirements.
* [[Juju (software)|Juju]], a service orchestration tool by [[Canonical Ltd.|Canonical]], packagers of [[Ubuntu (operating system)|Ubuntu]] Linux
* [[Kubernetes]] container management software
* [[OpenShift]], a cloud computing platform as a service by [[Red Hat]]
* Packer, a tool for creating identical machine images for multiple platforms from a single source configuration
* [[Snappy (package manager)|Snappy]], a package manager for [[Ubuntu Touch]] developed by Canonical.
* [[Syncthing]], an open-source file synchronization client/server application
* [[Terraform_(software)|Terraform]], an open-source, multiple [[Cloud_computing|cloud]] infrastructure provisioning tool from [[HashiCorp]].

Other notable companies and sites using Go (generally together with other languages, not exclusively) include:<ext><name>ref</name><attr/><inner>Erik Unger, [https://gist.github.com/ungerik/3731476 The Case For Go]</inner><close>&lt;/ref&gt;</close></ext><template><title>self-published inline</title><part><name>date</name><equals>=</equals><value>November 2015</value></part></template><ext><name>ref</name><attr/><inner>Andrew Gerrand, [http://blog.golang.org/4years Four years of Go], The Go Blog</inner><close>&lt;/ref&gt;</close></ext>
* [[AeroFS]], private cloud filesync appliance provider which migrated some microservices from [[Java (programming language)|Java]] to Go with major memory footprint improvements<ext><name>ref</name><attr/><inner>{{cite web |url=https://www.aerofs.com/resources/blog/a-little-golang-way-md/ |title=AeroFS - A little golang way |author=Hugues Bruant |work=AeroFS}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Chango (company)|Chango]], a programmatic advertising company uses Go in its real-time bidding systems.<ext><name>ref</name><attr/><inner>{{cite web |url=https://github.com/chango/ |title=Chango |work=GitHub}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Cloud Foundry]], a [[platform as a service]]<template><title>citation needed</title><part><name>date</name><equals>=</equals><value>July 2016</value></part></template>
* [[CloudFlare]], for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites.<ext><name>ref</name><attr/><inner>John Graham-Cumming, [http://blog.cloudflare.com/go-at-cloudflare Go at CloudFlare]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>John Graham-Cumming, [http://blog.cloudflare.com/what-weve-been-doing-with-go What we've been doing with Go]</inner><close>&lt;/ref&gt;</close></ext>
* [[CoreOS]], a Linux-based operating system that utilizes [[Docker (software)|Docker]] containers.<ext><name>ref</name><attr/><inner>{{cite web |url=https://blog.gopheracademy.com/birthday-bash-2014/go-at-coreos/ |title=Go at CoreOS}}</inner><close>&lt;/ref&gt;</close></ext>
*[[Couchbase]], Query and Indexing services within the Couchbase Server<ext><name>ref</name><attr/><inner>{{cite web |url=https://github.com/couchbase |title=Couchbase |work=GitHub}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Dropbox (service)|Dropbox]], migrated some of their critical components from Python to Go<ext><name>ref</name><attr/><inner>Patrick Lee, [https://tech.dropbox.com/2014/07/open-sourcing-our-go-libraries/ Open Sourcing Our Go Libraries], 7 July 2014.</inner><close>&lt;/ref&gt;</close></ext>
* [[Google]], for many projects, notably including download server dl.google.com<ext><name>ref</name><attr/><inner>{{cite web |url=http://talks.golang.org/2013/oscon-dl.slide |title=dl.google.com: Powered by Go |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>Matt Welsh, [http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html Rewriting a Large Production System in Go]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>David Symonds, [http://talks.golang.org/2013/highperf.slide High Performance Apps on Google App Engine]</inner><close>&lt;/ref&gt;</close></ext>
* [[MercadoLibre]], for several public APIs.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>July 2016</value></part></template>
* [[MongoDB]], tools for administering MongoDB instances<ext><name>ref</name><attr/><inner>{{cite web |url=https://github.com/mongodb/mongo-tools#building-tools |title=Mongo DB |work=GitHub}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Netflix]], for two portions of their server architecture<ext><name>ref</name><attr/><inner>{{cite web |url=http://techblog.netflix.com/2016/05/application-data-caching-using-ssds.html?m=1 |title=The Netflix Tech Blog: Application data caching using SSDs}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Novartis]], for an internal inventory system<ext><name>ref</name><attr/><inner>{{cite web
|url=https://plus.google.com/114945221884326152379/posts/d1SVaqkRyTL
|title=Google+ post by Don Dwoske
|work=Google+
|language=en-US
|access-date=2017-01-21
}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Plug.dj]], an interactive online social music streaming website.<ext><name>ref</name><attr/><inner>{{cite web |url=https://tech.plug.dj/2015/06/09/search-advances/ |title=Search &amp; Advances |author=Steven Sacks |work=plug.dj tech blog}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Replicated]], [[Docker (software)|Docker]] based [[Platform as a service|PaaS]] for creating enterprise, installable software.<ext><name>ref</name><attr/><inner>{{cite web |url=https://github.com/replicatedhq |title=ReplicatedHQ |work=GitHub}}</inner><close>&lt;/ref&gt;</close></ext>
* [[SendGrid]], a Boulder, Colorado-based transactional email delivery and management service.<ext><name>ref</name><attr/><inner>{{cite web |url=https://sendgrid.com/blog/convince-company-go-golang/ |title=How to Convince Your Company to Go With Golang |author=Tim Jenkins |work=SendGrid's Email Deliverability Blog}}</inner><close>&lt;/ref&gt;</close></ext>
* [[SoundCloud]], for &quot;dozens of systems&quot;<ext><name>ref</name><attr/><inner>Peter Bourgon, [http://backstage.soundcloud.com/2012/07/go-at-soundcloud/ Go at SoundCloud]</inner><close>&lt;/ref&gt;</close></ext>
* [[Splice (platform)|Splice]], for the entire backend (API and parsers) of their online music collaboration platform.<ext><name>ref</name><attr/><inner>{{cite web |url=http://blog.golang.org/io2014 |title=Go at Google I/O and Gopher SummerFest - The Go Blog |work=golang.org}}</inner><close>&lt;/ref&gt;</close></ext>
* [[ThoughtWorks]], some tools and applications around [[continuous delivery]] and instant messages ([[CoyIM]]).<ext><name>ref</name><attr/><inner>{{cite web |url=https://github.com/twstrike/coyim/ |title=CoyIM |author=TWSTRIKE |work=ThoughtWorks STRIKE team}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Twitch.tv]], for their IRC-based chat system (migrated from Python).<ext><name>ref</name><attr/><inner>Rhys Hiltner, [https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.wykex6pkr Go’s march to low-latency GC], 5 July 2016.</inner><close>&lt;/ref&gt;</close></ext>
* [[Uber (company)|Uber]], for handling high volumes of [[Geo-fence|geofence]]-based queries.<ext><name>ref</name><attr/><inner>{{cite web
|url=https://eng.uber.com/go-geofence/
|title=How We Built Uber Engineering’s Highest Query per Second Service Using Go
|work=Uber Engineering Blog
|language=en-US
|access-date=2016-03-02
}}</inner><close>&lt;/ref&gt;</close></ext>
* [[Zerodha]], for realtime peering and streaming of market data<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>November 2015</value></part></template>

<h level="2" i="18">==Reception==</h>
The interface system, and the deliberate omission of inheritance, were praised by [[Michele Simionato]], who likened these language characteristics to those of [[Standard ML]], calling it &quot;a shame that no popular language has followed [this] particular route in the design space&quot;.<ext><name>ref</name><attr/><inner>{{cite news |url=http://www.artima.com/weblogs/viewpost.jsp?thread=274019 |title=Interfaces vs Inheritance (or, watch out for Go!) |last= Simionato |first=Michele |date=15 November 2009 |publisher=artima |accessdate=15 November 2009}}</inner><close>&lt;/ref&gt;</close></ext>

Dave Astels at [[Engine Yard]] wrote:<ext><name>ref</name><attr/><inner>{{cite news |url=http://www.engineyard.com/blog/2009/ready-set-go/ |title=Ready, Set, Go! |last= Astels |first=Dave |date=9 November 2009 |publisher=engineyard |accessdate=9 November 2009}}</inner><close>&lt;/ref&gt;</close></ext>
<template lineStart="1"><title>quote </title><part><name index="1"/><value>Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the [[syntax (programming languages)|syntax]] is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges.</value></part></template>

''[[Ars Technica]]'' interviewed Rob Pike, one of the authors of Go, and asked why a new language was needed. He replied that:<ext><name>ref</name><attr> name=&quot;ars&quot;</attr><inner>{{cite news |url=https://arstechnica.com/open-source/news/2009/11/go-new-open-source-programming-language-from-google.ars |title=Go: new open source programming language from Google |last=Paul |first=Ryan |date=10 November 2009 |publisher=Ars Technica |accessdate=13 November 2009}}</inner><close>&lt;/ref&gt;</close></ext>
<template lineStart="1"><title>quote </title><part><name index="1"/><value>It wasn't enough to just add features to existing programming languages, because sometimes you can get more in the long run by taking things away. They wanted to start from scratch and rethink everything. ... [But they did not want] to deviate too much from what developers already knew because they wanted to avoid alienating Go's target audience.</value></part></template>

Go was named Programming Language of the Year by the [[TIOBE Programming Community Index]] in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,<ext><name>ref</name><attr/><inner>{{cite web |author=jt |title=Google's Go Wins Programming Language Of The Year Award |url=http://jaxenter.com/google-s-go-wins-programming-language-of-the-year-award-10069.html |publisher=jaxenter |accessdate=5 December 2012}}</inner><close>&lt;/ref&gt;</close></ext> surpassing established languages like [[Pascal (programming language)|Pascal]]. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than [[COBOL]] and [[Fortran]].<ext><name>ref</name><attr/><inner>{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html |title=TIOBE Programming Community Index for June 2015 |date=June 2015 |publisher=TIOBE Software |accessdate=5 July 2015}}</inner><close>&lt;/ref&gt;</close></ext> But as of January 2017, its ranking had surged to 13th again, indicating significant growth in popularity and adoption. Go was awarded TIOBE programming language of the year 2016.

Regarding Go, [[Bruce Eckel]] has stated:<ext><name>ref</name><attr/><inner>{{cite web |url=http://www.artima.com/weblogs/viewpost.jsp?thread=333589 |title=Calling Go from Python via JSON-RPC |date=27 August 2011 |author=Bruce Eckel |accessdate=29 August 2011}}</inner><close>&lt;/ref&gt;</close></ext>
<template lineStart="1"><title>quote</title><part><name index="1"/><value>The complexity of [[C++]] (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.</value></part></template>

A 2011 evaluation of the language and its <template><title>mono</title><part><name index="1"/><value>gc</value></part></template> implementation in comparison to C++ ([[GNU Compiler Collection|GCC]]), Java and [[Scala (programming language)|Scala]] by a Google engineer found that:
<template lineStart="1"><title>quote</title><part><name index="1"/><value>Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.</value></part><part><name index="2"/><value>R. Hundt<ext><name>ref</name><attr/><inner>{{cite conference |last=Hundt |first=Robert |title=Loop recognition in C++/Java/Go/Scala |conference=Scala Days |year=2011 |url=https://days2011.scala-lang.org/sites/days2011/files/ws3-1-Hundt.pdf}}</inner><close>&lt;/ref&gt;</close></ext></value></part></template>

The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was &quot;never intended to be an example of idiomatic or efficient Go&quot;; Russ Cox then did optimize the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the &quot;optimized&quot; code in the paper.<ext><name>ref</name><attr/><inner>{{cite web |title=Google Go strikes back with C++ bake-off |first=Cade |last=Metz |date=1 July 2011 |website=[[The Register]] |url=https://www.theregister.co.uk/2011/07/01/go_v_cpluplus_redux/}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="2" i="19">==Naming dispute==</h>
On 10 November 2009, the day of the general release of the language, Francis McCabe, developer of the [[Go! (programming language)|Go! programming language]] (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.<ext><name>ref</name><attr/><inner>{{cite news |url=http://www.geek.com/news/google-didnt-google-go-before-naming-their-programming-language-977351/ |title=Google didn't google &quot;Go&quot; before naming their programming language' |last=Brownlee |first=John |date=13 November 2009}}</inner><close>&lt;/ref&gt;</close></ext> McCabe raised concerns that &quot;the 'big guy' will end up steam-rollering over&quot; him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some<ext><name>ref</name><attr> name=&quot;infoweek&quot;</attr><inner>{{cite news |url=http://www.informationweek.com/news/software/web_services/showArticle.jhtml?articleID=221601351 |title=Google 'Go' Name Brings Accusations Of Evil' |last=Claburn |first=Thomas |date=11 November 2009 |publisher=InformationWeek |accessdate=18 January 2010}}</inner><close>&lt;/ref&gt;</close></ext> even saying the issue contradicts Google's motto of: [[Don't be evil]].<ext><name>ref</name><attr> name=&quot;issue9&quot;</attr><inner>{{cite web |url=https://code.google.com/p/go/issues/detail?id=9|title=Issue 9 - go&amp;nbsp;— I have already used the name for *MY* programming language |work=Google Code |publisher=[[Google Inc.]] |accessdate=12 October 2010}}</inner><close>&lt;/ref&gt;</close></ext>

On 12 October 2010, the issue was closed by Google developer Russ Cox (@rsc) with the custom status &quot;Unfortunate&quot; accompanied by the following comment: &lt;blockquote&gt;&quot;There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages.&quot;<ext><name>ref</name><attr> name=&quot;issue9&quot;</attr></ext>&lt;/blockquote&gt;

<h level="2" i="20">==See also==</h>
<template lineStart="1"><title>Portal</title><part><name index="1"/><value>Free software</value></part></template>
* [[Comparison of programming languages]]
* [[Dart (programming language)|Dart]], another Google programming language
* [[UFCS]], a way of having &quot;open methods&quot; in other languages

<h level="2" i="21">==Notes==</h>
<template lineStart="1"><title>notelist</title></template>

<h level="2" i="22">==References==</h>
<template lineStart="1"><title>hatnote</title><part><name index="1"/><value>This article incorporates material from the [http://golang.org/doc/go_tutorial.html official Go tutorial], which is licensed under the Creative Commons Attribution 3.0 license.</value></part></template>
<template lineStart="1"><title>Reflist</title><part><name index="1"/><value>30em</value></part></template>

<h level="2" i="23">==External links==</h>
<template lineStart="1"><title>commons category</title><part><name index="1"/><value>Go programming language</value></part></template>
<template lineStart="1"><title>Prone to spam</title><part><name>date</name><equals>=</equals><value>June 2013</value></part></template>
<template lineStart="1"><title>Z148</title></template><comment>&lt;!--     {{No more links}}

       Please be cautious adding more external links.

Wikipedia is not a collection of links and should not be used for advertising.

     Excessive or inappropriate links will be removed.

 See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details.

If there are already suitable links, propose additions or replacements on
the article's talk page, or submit your link to the relevant category at
the Open Directory Project (dmoz.org) and link there using {{Dmoz}}.

--&gt;</comment>
* <template><title>Official website</title></template>
* [https://tour.golang.org/ A Tour of Go] (official)
* [http://go-lang.cat-v.org/ Go Programming Language Resources] (unofficial - page ceased updating in October, 2012)

<h level="3" i="24">===Community and conferences===</h>
<comment>&lt;!-- I think maybe this section should be deleted, but didn't want to combine that with separating Go users and libraries sections --&gt;
</comment>* [http://gopheracademy.com/ Gopher Academy], Gopher Academy is a group of developers working to educate and promote the Go community.
* [http://golangprojects.com/ Golangprojects.com], lists programming jobs and projects where companies are looking for people that know Go
* [http://www.gophercon.com/ GopherCon] The first Go conference. Denver, Colorado, USA April 
* [http://www.gophergala.com Gopher Gala] The first Go hackathon. 
* [http://www.gophercon.in/ GopherConIndia] The first Go conference in India. Bangalore Feb.
* [http://www.golanguk.com/ GolangUK] The first Go conference in UK. London 
* [http://www.dotgo.eu/ dotGo] European conference. Paris, France 
* [https://golangshow.com GolangShow] Go audio podcast GolangShow
* [https://golang.com.ar/ Golang Argentina] Gophers community blog in Argentina.

<template lineStart="1"><title>Programming languages</title></template>
<template lineStart="1"><title>Google Inc.</title></template>
<template lineStart="1"><title>Rob Pike navbox</title></template>
<template lineStart="1"><title>Ken Thompson navbox</title></template>

<template lineStart="1"><title>Authority control</title></template>

<template lineStart="1"><title>Use dmy dates</title><part><name>date</name><equals>=</equals><value>August 2011</value></part></template>

[[Category:American inventions]]
[[Category:C programming language family]]
[[Category:Concurrent programming languages]]
[[Category:Cross-platform software]]
[[Category:Free compilers and interpreters]]
[[Category:Google software]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created in 2009]]
[[Category:Software using the BSD license]]
[[Category:Statically typed programming languages]]
[[Category:Systems programming languages]]</root>
